# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Memento MCP Tests

on:
  push:
    branches: [ "**" ]  # Trigger on all branches
  pull_request:
    branches: [ "**" ]  # Trigger on all PRs

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    services:
      # Set up Neo4j service for graph database and vector search
      neo4j:
        image: neo4j:2025.03.0-enterprise
        env:
          NEO4J_AUTH: neo4j/memento_password
          NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
          NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "wget -O - http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    # Fix for rollup optional dependencies issue
    - name: Clean npm cache
      run: |
        rm -rf node_modules
        rm -f package-lock.json
      
    - name: Install dependencies
      run: npm install
      
    - name: Build project
      run: npm run build --if-present
      
    - name: Create mock .env file for tests
      run: |
        echo "# Mock environment for CI testing" >> .env
        echo "# This enables tests to run without a real OpenAI API key" >> .env
        echo "OPENAI_API_KEY=sk-mock-api-key-for-tests" >> .env
        echo "OPENAI_EMBEDDING_MODEL=text-embedding-3-small" >> .env
        echo "# The MOCK_EMBEDDINGS flag forces the use of DefaultEmbeddingService" >> .env
        echo "# which generates random vectors instead of calling the OpenAI API" >> .env
        echo "MOCK_EMBEDDINGS=true" >> .env
        echo "ENV_FILE_CREATED=true" >> .env
        cat .env
      
    - name: Initialize Neo4j Schema
      run: npm run neo4j:init
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: memento_password
        NEO4J_DATABASE: neo4j
        NEO4J_VECTOR_INDEX: entity_embeddings
        NEO4J_VECTOR_DIMENSIONS: 1536
        NEO4J_SIMILARITY_FUNCTION: cosine
      
    - name: Run tests
      run: npm test
      env:
        MEMORY_STORAGE_TYPE: neo4j
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: memento_password
        NEO4J_DATABASE: neo4j
        NEO4J_VECTOR_INDEX: entity_embeddings
        NEO4J_VECTOR_DIMENSIONS: 1536
        NEO4J_SIMILARITY_FUNCTION: cosine
        OPENAI_API_KEY: sk-mock-api-key-for-tests
        OPENAI_EMBEDDING_MODEL: text-embedding-3-small
        MOCK_EMBEDDINGS: true
      
    - name: Run test coverage
      run: npm run test:coverage
      env:
        MEMORY_STORAGE_TYPE: neo4j
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: memento_password
        NEO4J_DATABASE: neo4j
        NEO4J_VECTOR_INDEX: entity_embeddings
        NEO4J_VECTOR_DIMENSIONS: 1536
        NEO4J_SIMILARITY_FUNCTION: cosine
        OPENAI_API_KEY: sk-mock-api-key-for-tests
        OPENAI_EMBEDDING_MODEL: text-embedding-3-small
        MOCK_EMBEDDINGS: true

  publish:
    name: Publish to npm
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: |
        rm -rf node_modules
        rm -f package-lock.json
        npm install
      
    - name: Build package
      run: npm run build
      
    - name: Set executable permissions
      run: chmod +x dist/*.js
      
    - name: Check and bump version if needed
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version in package.json: $CURRENT_VERSION"
        
        # Check if version exists on npm
        if npm view @gannonh/memento-mcp@$CURRENT_VERSION version &> /dev/null; then
          echo "Version $CURRENT_VERSION already exists on npm, bumping patch version"
          # Increment patch version
          npm version patch
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Bumped to version: $NEW_VERSION"
        else
          echo "Version $CURRENT_VERSION does not exist on npm, continuing with publish"
        fi
      
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Verify package
      run: |
        # Wait for npm registry propagation (can take a few minutes)
        echo "Waiting for package to propagate to npm registry..."
        sleep 60
        
        # Create test directory
        mkdir -p /tmp/npm-test
        cd /tmp/npm-test
        
        # Initialize test project with type: module
        echo '{
          "name": "npm-test",
          "version": "1.0.0",
          "type": "module",
          "main": "index.js"
        }' > package.json
        
        # Show npm registry information
        echo "Checking npm registry for package..."
        npm view @gannonh/memento-mcp version || echo "Package not yet visible in registry"
        
        # Install the just-published package
        npm install @gannonh/memento-mcp --verbose
        
        # List installed packages and structure
        echo "Installed packages:"
        ls -la node_modules/@gannonh/memento-mcp
        echo "Package dist directory:"
        ls -la node_modules/@gannonh/memento-mcp/dist
        echo "Package.json contents:"
        cat node_modules/@gannonh/memento-mcp/package.json
        
        # Create test file using ESM imports
        echo 'import pkg from "@gannonh/memento-mcp";
        console.log("Package loaded successfully:", Object.keys(pkg));' > test.mjs
        
        # Test with Node ESM
        echo "Testing ESM import..."
        node test.mjs
        
        echo "âœ… Package verification successful"
